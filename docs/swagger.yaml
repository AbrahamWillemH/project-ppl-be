definitions:
  auth.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.CreateStudentRequest:
    properties:
      grade:
        type: string
      name:
        type: string
      nis:
        type: string
      status:
        type: string
    type: object
  models.CreateTeacherRequest:
    properties:
      name:
        type: string
      nip:
        type: string
      specialization:
        type: string
      status:
        type: string
    type: object
  models.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - role
    - username
    type: object
  models.Student:
    properties:
      curr_score:
        type: string
      grade:
        type: string
      id:
        type: integer
      name:
        type: string
      nis:
        type: string
      phone_number:
        type: string
      profile_picture_url:
        type: string
      status:
        type: string
      user_id:
        type: string
    type: object
  models.Teacher:
    properties:
      id:
        type: integer
      name:
        type: string
      nip:
        type: string
      phone_number:
        type: string
      profile_picture_url:
        type: string
      specialization:
        type: string
      status:
        type: string
      user_id:
        type: string
    type: object
  models.UpdateTeacherRequest:
    properties:
      name:
        type: string
      nip:
        type: string
      phone_number:
        type: string
      profile_picture_url:
        type: string
      specialization:
        type: string
      status:
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  description: API documentation for Project PPL - Kuda Hitam
  title: Project PPL API
  version: 0.1.3
paths:
  /api/v1/auth:
    post:
      consumes:
      - application/json
      description: Auth API to differentiate roles
      parameters:
      - description: Login Credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login authentication
      tags:
      - Auth
  /api/v1/ping:
    get:
      consumes:
      - application/json
      description: A simple ping-pong endpoint
      produces:
      - application/json
      responses:
        "200":
          description: pong
          schema:
            type: string
      summary: Ping the server
      tags:
      - HealthCheck
  /api/v1/students:
    get:
      consumes:
      - application/json
      description: Fetch all students from the database with pagination, filtering
        by grade, and sorting by NIS
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 40)'
        in: query
        name: pageSize
        type: integer
      - description: Filter by grade (e.g., '10')
        in: query
        name: grade
        type: string
      - description: Sort by NIS (true for ascending, false for descending)
        in: query
        name: sortByNIS
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get Students
      tags:
      - Students
    post:
      consumes:
      - application/json
      description: Create a new student in the database
      parameters:
      - description: Student data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateStudentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Student'
      security:
      - BearerAuth: []
      summary: Create Student
      tags:
      - Students
  /api/v1/teachers:
    get:
      consumes:
      - application/json
      description: Fetch all teachers from the database with pagination, filtering
        by specialization, and sorting by NIP
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 40)'
        in: query
        name: pageSize
        type: integer
      - description: Filter by specialization (e.g., 'IPA')
        in: query
        name: specialization
        type: string
      - description: Sort by NIP (true for ascending, false for descending)
        in: query
        name: sortByNIP
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get Teachers
      tags:
      - Teachers
    patch:
      consumes:
      - application/json
      description: Updates an existing teacher in the database
      parameters:
      - description: Teacher ID
        in: query
        name: id
        required: true
        type: integer
      - description: Updated Teacher Data
        in: body
        name: teacher
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTeacherRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Teacher'
      security:
      - BearerAuth: []
      summary: Update Teacher
      tags:
      - Teachers
    post:
      consumes:
      - application/json
      description: Create a new teacher in the database
      parameters:
      - description: Teacher data
        in: body
        name: teacher
        required: true
        schema:
          $ref: '#/definitions/models.CreateTeacherRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Teacher'
      security:
      - BearerAuth: []
      summary: Create Teacher
      tags:
      - Teachers
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Fetch all users from the database with pagination, filtering by
        role, and sorting by username
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 40)'
        in: query
        name: pageSize
        type: integer
      - description: Filter by role (e.g., 'admin', 'student')
        in: query
        name: role
        type: string
      - description: Sort by username (true for ascending, false for descending)
        in: query
        name: sortByUsername
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get Users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user in the database
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - BearerAuth: []
      summary: Create User
      tags:
      - Users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Enter "Bearer {token}" to authenticate
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
