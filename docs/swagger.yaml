definitions:
  auth.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.CalculateExamGrades:
    properties:
      exam_id:
        type: integer
      student_id:
        type: integer
    type: object
  models.CalculateExerciseGrades:
    properties:
      exercise_id:
        type: integer
      student_id:
        type: integer
    type: object
  models.Class:
    properties:
      description:
        type: string
      grade:
        type: integer
      id:
        type: integer
      name:
        type: string
      teacher_id:
        type: integer
      teacher_name:
        type: string
    type: object
  models.ClassAssignStudents:
    properties:
      id:
        type: integer
      student_id:
        items:
          type: integer
        type: array
    type: object
  models.CreateClassRequest:
    properties:
      description:
        type: string
      grade:
        type: integer
      name:
        type: string
      teacher_id:
        type: integer
    type: object
  models.CreateDiscussionRequest:
    properties:
      description:
        type: string
      replies: {}
      student_id:
        type: integer
      topic:
        type: string
    type: object
  models.CreateExamAnswersRequest:
    properties:
      answers: {}
      exam_id:
        type: integer
      student_id:
        type: integer
    type: object
  models.CreateExamsRequest:
    properties:
      class_id:
        type: integer
      content: {}
      end_time:
        type: string
      start_time:
        type: string
      teacher_id:
        type: integer
      title:
        type: string
      total_marks:
        type: integer
    type: object
  models.CreateExerciseAnswersRequest:
    properties:
      answers: {}
      exercise_id:
        type: integer
      student_id:
        type: integer
    type: object
  models.CreateExercisesRequest:
    properties:
      content: {}
      material_id:
        type: integer
      teacher_id:
        type: integer
      title:
        type: string
      total_marks:
        type: integer
    type: object
  models.CreateMaterialRequest:
    properties:
      class_id:
        type: integer
      content:
        type: string
      description:
        type: string
      teacher_id:
        type: integer
      title:
        type: string
    type: object
  models.CreateStudentRequest:
    properties:
      grade:
        type: integer
      name:
        type: string
      nis:
        type: string
      status:
        type: string
    type: object
  models.CreateTeacherRequest:
    properties:
      name:
        type: string
      nip:
        type: string
      specialization:
        type: string
      status:
        type: string
    type: object
  models.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - role
    - username
    type: object
  models.Discussion:
    properties:
      description:
        type: string
      id:
        type: integer
      replies: {}
      student_id:
        type: integer
      topic:
        type: string
    type: object
  models.ExamAnswers:
    properties:
      answers: {}
      exam_id:
        type: integer
      id:
        type: integer
      status:
        type: string
      student_id:
        type: integer
    type: object
  models.ExamGrades:
    properties:
      detail: {}
      exam_id:
        type: integer
      id:
        type: integer
      score:
        type: number
      student_id:
        type: integer
    type: object
  models.Exams:
    properties:
      class_id:
        type: integer
      content: {}
      end_time:
        type: string
      id:
        type: integer
      start_time:
        type: string
      status:
        type: string
      teacher_id:
        type: integer
      title:
        type: string
      total_marks:
        type: integer
    type: object
  models.ExerciseAnswers:
    properties:
      answers: {}
      exercise_id:
        type: integer
      id:
        type: integer
      status:
        type: string
      student_id:
        type: integer
    type: object
  models.ExerciseGrades:
    properties:
      detail: {}
      exercise_id:
        type: integer
      id:
        type: integer
      score:
        type: number
      student_id:
        type: integer
    type: object
  models.Exercises:
    properties:
      content: {}
      id:
        type: integer
      material_id:
        type: integer
      teacher_id:
        type: integer
      title:
        type: string
      total_marks:
        type: integer
    type: object
  models.Material:
    properties:
      class_id:
        type: integer
      content:
        type: string
      description:
        type: string
      id:
        type: integer
      teacher_id:
        type: integer
      title:
        type: string
    type: object
  models.MigrateStudentGradeRequest:
    properties:
      migrate:
        default: up
        type: string
    required:
    - migrate
    type: object
  models.ReplyDiscussion:
    properties:
      replies:
        type: string
      student_id:
        type: integer
      student_name:
        type: string
    type: object
  models.Student:
    properties:
      curr_score:
        type: integer
      grade:
        type: integer
      id:
        type: integer
      name:
        type: string
      nis:
        type: string
      phone_number:
        type: string
      profile_picture_url:
        type: string
      status:
        type: string
      user_id:
        type: string
    type: object
  models.Teacher:
    properties:
      id:
        type: integer
      name:
        type: string
      nip:
        type: string
      phone_number:
        type: string
      profile_picture_url:
        type: string
      specialization:
        type: string
      status:
        type: string
      user_id:
        type: string
    type: object
  models.UpdateDiscussionRequest:
    properties:
      description:
        type: string
      student_id:
        type: integer
      topic:
        type: string
    type: object
  models.UpdateMaterialRequest:
    properties:
      class_id:
        type: integer
      content:
        type: string
      description:
        type: string
      teacher_id:
        type: integer
      title:
        type: string
    type: object
  models.UpdateStudentRequest:
    properties:
      curr_score:
        type: integer
      grade:
        type: integer
      name:
        type: string
      nis:
        type: string
      phone_number:
        type: string
      profile_picture_url:
        type: string
      status:
        type: string
    type: object
  models.UpdateTeacherRequest:
    properties:
      name:
        type: string
      nip:
        type: string
      phone_number:
        type: string
      profile_picture_url:
        type: string
      specialization:
        type: string
      status:
        type: string
    type: object
  models.User:
    properties:
      display_name:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  description: API documentation for Project PPL - Learnify
  title: Project PPL API
  version: 0.2.1
paths:
  /api/v1/auth:
    post:
      consumes:
      - application/json
      description: Auth API to differentiate roles
      parameters:
      - description: Login Credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login authentication
      tags:
      - Auth
  /api/v1/classes:
    delete:
      consumes:
      - application/json
      description: Deletes a class from the database by ID
      parameters:
      - description: Class ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete Class
      tags:
      - Classes
    get:
      consumes:
      - application/json
      description: Fetch all classes from the database with pagination
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 15)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get Class
      tags:
      - Classes
    patch:
      consumes:
      - application/json
      description: Updates an existing class in the database
      parameters:
      - description: Class ID
        in: query
        name: id
        required: true
        type: integer
      - description: Updated Class Data
        in: body
        name: class
        required: true
        schema:
          $ref: '#/definitions/models.CreateClassRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Class'
      security:
      - BearerAuth: []
      summary: Update Class
      tags:
      - Classes
    post:
      consumes:
      - application/json
      description: Create a new class in the database
      parameters:
      - description: Class data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateClassRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Class'
      security:
      - BearerAuth: []
      summary: Create Class
      tags:
      - Classes
  /api/v1/classes/assign-students:
    post:
      consumes:
      - application/json
      description: Assign multiple students to a class in the database
      parameters:
      - description: Assign students to class
        in: body
        name: classAssignStudents
        required: true
        schema:
          $ref: '#/definitions/models.ClassAssignStudents'
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request - Invalid Input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error - Database Issue
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Assign Students to Class
      tags:
      - Classes
  /api/v1/classes/assigned:
    get:
      consumes:
      - application/json
      description: Fetch assigned classes for a student using their ID with pagination
      parameters:
      - description: Student ID
        in: query
        name: id
        required: true
        type: integer
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 15)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get classes for a student
      tags:
      - Classes
  /api/v1/classes/class-id:
    get:
      consumes:
      - application/json
      description: Fetch class id
      parameters:
      - description: Grade
        in: query
        name: grade
        required: true
        type: integer
      - description: teacher_id
        in: query
        name: teacher_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get class id by grade and logged in teacher
      tags:
      - Classes
  /api/v1/classes/details:
    get:
      consumes:
      - application/json
      description: Fetch assigned students and teachers in the class
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 15)'
        in: query
        name: pageSize
        type: integer
      - description: Class ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get Class by Id
      tags:
      - Classes
  /api/v1/classes/unassign-students:
    delete:
      consumes:
      - application/json
      description: Unassigns a student from a class in the database
      parameters:
      - description: Unassigns students from a class
        in: body
        name: classAssignStudents
        required: true
        schema:
          $ref: '#/definitions/models.ClassAssignStudents'
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request - Invalid Input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error - Database Issue
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Unassign Student from a Class
      tags:
      - Classes
  /api/v1/discussions:
    delete:
      consumes:
      - application/json
      description: Deletes a discussion from the database by ID
      parameters:
      - description: Discussion ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete Discussion
      tags:
      - Discussions
    get:
      consumes:
      - application/json
      description: Fetch all discussions from the database with pagination
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 15)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get Discussions
      tags:
      - Discussions
    patch:
      consumes:
      - application/json
      description: Updates an existing discussion in the database
      parameters:
      - description: Discussion ID
        in: query
        name: id
        required: true
        type: integer
      - description: Updated Discussion Data
        in: body
        name: discussion
        required: true
        schema:
          $ref: '#/definitions/models.UpdateDiscussionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Discussion'
      security:
      - BearerAuth: []
      summary: Update Discussion
      tags:
      - Discussions
    post:
      consumes:
      - application/json
      description: Create a new discussion in the database
      parameters:
      - description: Discussion data
        in: body
        name: discussion
        required: true
        schema:
          $ref: '#/definitions/models.CreateDiscussionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Discussion'
      security:
      - BearerAuth: []
      summary: Create Discussion
      tags:
      - Discussions
  /api/v1/discussions/reply:
    patch:
      consumes:
      - application/json
      description: Replies or comments on an existing discussion
      parameters:
      - description: Discussion ID
        in: query
        name: id
        required: true
        type: integer
      - description: Updated Discussion Data
        in: body
        name: discussion
        required: true
        schema:
          $ref: '#/definitions/models.ReplyDiscussion'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Discussion'
      security:
      - BearerAuth: []
      summary: Reply or comment on a Discussion
      tags:
      - Discussions
  /api/v1/exams:
    delete:
      consumes:
      - application/json
      description: Delete an exam by ID
      parameters:
      - description: Exam ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete Exam
      tags:
      - Exams
    get:
      consumes:
      - application/json
      description: Fetch exam from a class
      parameters:
      - description: Class ID
        in: query
        name: class_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Exams'
            type: array
      security:
      - BearerAuth: []
      summary: Get Exams by Class ID
      tags:
      - Exams
    patch:
      consumes:
      - application/json
      description: Update an existing exam
      parameters:
      - description: Exam ID
        in: query
        name: id
        required: true
        type: integer
      - description: Updated data
        in: body
        name: exam
        required: true
        schema:
          $ref: '#/definitions/models.CreateExamsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Exams'
      security:
      - BearerAuth: []
      summary: Update Exam
      tags:
      - Exams
    post:
      consumes:
      - application/json
      description: Create a new exam
      parameters:
      - description: Exam data
        in: body
        name: exam
        required: true
        schema:
          $ref: '#/definitions/models.CreateExamsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Exams'
      security:
      - BearerAuth: []
      summary: Create Exam
      tags:
      - Exams
  /api/v1/exams-answers:
    delete:
      consumes:
      - application/json
      description: Delete an exam answer by ID
      parameters:
      - description: Exam ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete Exam Answer
      tags:
      - Exam Answers (Student Answers)
    get:
      consumes:
      - application/json
      description: Fetch all exams for a specific material
      parameters:
      - description: Exam ID
        in: query
        name: exam_id
        required: true
        type: integer
      - description: Student ID
        in: query
        name: student_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ExamAnswers'
            type: array
      security:
      - BearerAuth: []
      summary: Get Exam Answers by Exam ID
      tags:
      - Exam Answers (Student Answers)
    patch:
      consumes:
      - application/json
      description: Update an existing exam answer
      parameters:
      - description: Exam Answer ID (Student's Answer ID)
        in: query
        name: id
        required: true
        type: integer
      - description: Updated data
        in: body
        name: exam
        required: true
        schema:
          $ref: '#/definitions/models.CreateExamAnswersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ExamAnswers'
      security:
      - BearerAuth: []
      summary: Update Exam Answer
      tags:
      - Exam Answers (Student Answers)
    post:
      consumes:
      - application/json
      description: Create a new exam
      parameters:
      - description: Exam answers data
        in: body
        name: exam
        required: true
        schema:
          $ref: '#/definitions/models.CreateExamAnswersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ExamAnswers'
      security:
      - BearerAuth: []
      summary: Create Exam Answers
      tags:
      - Exam Answers (Student Answers)
  /api/v1/exams/calculate-grade:
    post:
      consumes:
      - application/json
      description: Calculate grade after submitting exam
      parameters:
      - description: Exam grades data
        in: body
        name: exam
        required: true
        schema:
          $ref: '#/definitions/models.CalculateExamGrades'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ExamGrades'
      security:
      - BearerAuth: []
      summary: Calculate Grade
      tags:
      - Exam Answers (Student Answers)
  /api/v1/exams/get-all-grade:
    get:
      consumes:
      - application/json
      description: Get calculated grades for all exams
      parameters:
      - description: Student ID
        in: query
        name: student_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ExamGrades'
      security:
      - BearerAuth: []
      summary: Get ALl Grades
      tags:
      - Exam Answers (Student Answers)
  /api/v1/exams/get-grade:
    get:
      consumes:
      - application/json
      description: Get calculated grade
      parameters:
      - description: Exam ID
        in: query
        name: exam_id
        required: true
        type: integer
      - description: Student ID
        in: query
        name: student_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ExamGrades'
      security:
      - BearerAuth: []
      summary: Get Grade
      tags:
      - Exam Answers (Student Answers)
  /api/v1/exams/student:
    get:
      consumes:
      - application/json
      description: Fetch all exams for a specific class
      parameters:
      - description: Class ID
        in: query
        name: class_id
        required: true
        type: integer
      - description: Number
        in: query
        name: number
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Exams'
            type: array
      security:
      - BearerAuth: []
      summary: Get Exams for Student
      tags:
      - Exams
  /api/v1/exercises:
    delete:
      consumes:
      - application/json
      description: Delete an exercise by ID
      parameters:
      - description: Exercise ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete Exercise
      tags:
      - Exercises
    get:
      consumes:
      - application/json
      description: Fetch all exercises for a specific material
      parameters:
      - description: Material ID
        in: query
        name: material_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Exercises'
            type: array
      security:
      - BearerAuth: []
      summary: Get Exercises by Material ID
      tags:
      - Exercises
    patch:
      consumes:
      - application/json
      description: Update an existing exercise
      parameters:
      - description: Exercise ID
        in: query
        name: id
        required: true
        type: integer
      - description: Updated data
        in: body
        name: exercise
        required: true
        schema:
          $ref: '#/definitions/models.CreateExercisesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Exercises'
      security:
      - BearerAuth: []
      summary: Update Exercise
      tags:
      - Exercises
    post:
      consumes:
      - application/json
      description: Create a new exercise
      parameters:
      - description: Exercise data
        in: body
        name: exercise
        required: true
        schema:
          $ref: '#/definitions/models.CreateExercisesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Exercises'
      security:
      - BearerAuth: []
      summary: Create Exercise
      tags:
      - Exercises
  /api/v1/exercises-answers:
    delete:
      consumes:
      - application/json
      description: Delete an exercise answer by ID
      parameters:
      - description: Exercise ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete Exercise Answer
      tags:
      - Exercise Answers (Student Answers)
    get:
      consumes:
      - application/json
      description: Fetch all exercises for a specific material
      parameters:
      - description: Exercise ID
        in: query
        name: exercise_id
        required: true
        type: integer
      - description: Student ID
        in: query
        name: student_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ExerciseAnswers'
            type: array
      security:
      - BearerAuth: []
      summary: Get Exercise Answers by Exercise ID
      tags:
      - Exercise Answers (Student Answers)
    patch:
      consumes:
      - application/json
      description: Update an existing exercise answer
      parameters:
      - description: Exercise Answer ID (Student's Answer ID)
        in: query
        name: id
        required: true
        type: integer
      - description: Updated data
        in: body
        name: exercise
        required: true
        schema:
          $ref: '#/definitions/models.CreateExerciseAnswersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ExerciseAnswers'
      security:
      - BearerAuth: []
      summary: Update Exercise Answer
      tags:
      - Exercise Answers (Student Answers)
    post:
      consumes:
      - application/json
      description: Create a new exercise
      parameters:
      - description: Exercise answers data
        in: body
        name: exercise
        required: true
        schema:
          $ref: '#/definitions/models.CreateExerciseAnswersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ExerciseAnswers'
      security:
      - BearerAuth: []
      summary: Create Exercise Answers
      tags:
      - Exercise Answers (Student Answers)
  /api/v1/exercises/calculate-grade:
    post:
      consumes:
      - application/json
      description: Calculate grade after submitting exercise
      parameters:
      - description: Exercise grades data
        in: body
        name: exercise
        required: true
        schema:
          $ref: '#/definitions/models.CalculateExerciseGrades'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ExerciseGrades'
      security:
      - BearerAuth: []
      summary: Calculate Grade
      tags:
      - Exercise Answers (Student Answers)
  /api/v1/exercises/get-all-grade:
    get:
      consumes:
      - application/json
      description: Get calculated grades for all materials
      parameters:
      - description: Student ID
        in: query
        name: student_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ExerciseGrades'
      security:
      - BearerAuth: []
      summary: Get All Grades
      tags:
      - Exercise Answers (Student Answers)
  /api/v1/exercises/get-grade:
    get:
      consumes:
      - application/json
      description: Get calculated grade
      parameters:
      - description: Exercise ID
        in: query
        name: exercise_id
        required: true
        type: integer
      - description: Student ID
        in: query
        name: student_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ExerciseGrades'
      security:
      - BearerAuth: []
      summary: Get Grade
      tags:
      - Exercise Answers (Student Answers)
  /api/v1/exercises/student:
    get:
      consumes:
      - application/json
      description: Fetch all exercises for a specific material
      parameters:
      - description: Material ID
        in: query
        name: material_id
        required: true
        type: integer
      - description: Number
        in: query
        name: number
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Exercises'
            type: array
      security:
      - BearerAuth: []
      summary: Get Exercises for Student
      tags:
      - Exercises
  /api/v1/materials:
    delete:
      consumes:
      - application/json
      description: Deletes a material from the database by ID
      parameters:
      - description: Material ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete Material
      tags:
      - Materials
    get:
      consumes:
      - application/json
      description: Fetch all materials from the database with pagination
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 15)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get Materials
      tags:
      - Materials
    patch:
      consumes:
      - application/json
      description: Updates an existing material in the database
      parameters:
      - description: Material ID
        in: query
        name: id
        required: true
        type: integer
      - description: Updated Material Data
        in: body
        name: material
        required: true
        schema:
          $ref: '#/definitions/models.UpdateMaterialRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Material'
      security:
      - BearerAuth: []
      summary: Update Material
      tags:
      - Materials
    post:
      consumes:
      - application/json
      description: Create a new material in the database
      parameters:
      - description: Material data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateMaterialRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Material'
      security:
      - BearerAuth: []
      summary: Create Material
      tags:
      - Materials
  /api/v1/materials/from-class:
    get:
      consumes:
      - application/json
      description: Fetch materials by class id from the database with pagination
      parameters:
      - description: Class ID
        in: query
        name: id
        required: true
        type: integer
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 15)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get Materials by class id
      tags:
      - Materials
  /api/v1/ping:
    get:
      consumes:
      - application/json
      description: A simple ping-pong endpoint
      produces:
      - application/json
      responses:
        "200":
          description: pong
          schema:
            type: string
      summary: Ping the server
      tags:
      - HealthCheck
  /api/v1/students:
    delete:
      consumes:
      - application/json
      description: Deletes a student from the database by ID
      parameters:
      - description: Student ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete Student
      tags:
      - Students
    get:
      consumes:
      - application/json
      description: Fetch all students from the database with pagination, filtering
        by grade, and sorting by NIS
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 15)'
        in: query
        name: pageSize
        type: integer
      - description: Filter by grade (e.g., '10')
        in: query
        name: grade
        type: string
      - description: Sort by NIS (true for ascending, false for descending)
        in: query
        name: sortByNIS
        type: boolean
      - description: Search by Name or NIS
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get Students
      tags:
      - Students
    patch:
      consumes:
      - application/json
      description: Updates an existing student in the database
      parameters:
      - description: Student ID
        in: query
        name: id
        required: true
        type: integer
      - description: Updated Student Data
        in: body
        name: student
        required: true
        schema:
          $ref: '#/definitions/models.UpdateStudentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Student'
      security:
      - BearerAuth: []
      summary: Update Student
      tags:
      - Students
    post:
      consumes:
      - application/json
      description: Create a new student in the database
      parameters:
      - description: Student data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateStudentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Student'
      security:
      - BearerAuth: []
      summary: Create Student
      tags:
      - Students
  /api/v1/students/details:
    get:
      consumes:
      - application/json
      description: Fetch a single student from the database by their ID
      parameters:
      - description: Student ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Student'
      security:
      - BearerAuth: []
      summary: Get Student by ID
      tags:
      - Students
  /api/v1/students/grade-migrate:
    post:
      consumes:
      - application/json
      description: Accepts "up" to increase grade, and "down" to decrease grade
      parameters:
      - description: Student grade
        in: body
        name: student
        required: true
        schema:
          $ref: '#/definitions/models.MigrateStudentGradeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Student'
      security:
      - BearerAuth: []
      summary: Migrates Student Grades by 1.
      tags:
      - Students
  /api/v1/teachers:
    delete:
      consumes:
      - application/json
      description: Deletes a teacher from the database by ID
      parameters:
      - description: Teacher ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete Teacher
      tags:
      - Teachers
    get:
      consumes:
      - application/json
      description: Fetch all teachers from the database with pagination, filtering
        by specialization, and sorting by NIP
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 15)'
        in: query
        name: pageSize
        type: integer
      - description: Filter by specialization (e.g., 'IPA')
        in: query
        name: specialization
        type: string
      - description: Sort by NIP (true for ascending, false for descending)
        in: query
        name: sortByNIP
        type: boolean
      - description: Search by Name or NIP
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get Teachers
      tags:
      - Teachers
    patch:
      consumes:
      - application/json
      description: Updates an existing teacher in the database
      parameters:
      - description: Teacher ID
        in: query
        name: id
        required: true
        type: integer
      - description: Updated Teacher Data
        in: body
        name: teacher
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTeacherRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Teacher'
      security:
      - BearerAuth: []
      summary: Update Teacher
      tags:
      - Teachers
    post:
      consumes:
      - application/json
      description: Create a new teacher in the database
      parameters:
      - description: Teacher data
        in: body
        name: teacher
        required: true
        schema:
          $ref: '#/definitions/models.CreateTeacherRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Teacher'
      security:
      - BearerAuth: []
      summary: Create Teacher
      tags:
      - Teachers
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Fetch all users from the database with pagination, filtering by
        role, and sorting by username
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 15)'
        in: query
        name: pageSize
        type: integer
      - description: Filter by role (e.g., 'admin', 'student')
        in: query
        name: role
        type: string
      - description: Sort by username (true for ascending, false for descending)
        in: query
        name: sortByUsername
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get Users
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Updates an existing user in the database
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: integer
      - description: Updated User Data
        in: body
        name: teacher
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - BearerAuth: []
      summary: Update User
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user in the database
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - BearerAuth: []
      summary: Create User
      tags:
      - Users
schemes:
- https
securityDefinitions:
  BearerAuth:
    description: Enter "Bearer {token}" to authenticate
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
