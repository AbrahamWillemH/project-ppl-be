definitions:
  auth.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - role
    - username
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  description: API documentation for Project PPL BE
  title: Project PPL API
  version: 0.1.3
paths:
  /api/v1/auth:
    post:
      consumes:
      - application/json
      description: Auth API to differentiate roles
      parameters:
      - description: Login Credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login authentication
      tags:
      - Auth
  /api/v1/ping:
    get:
      consumes:
      - application/json
      description: A simple ping-pong endpoint
      produces:
      - application/json
      responses:
        "200":
          description: pong
          schema:
            type: string
      summary: Ping the server
      tags:
      - HealthCheck
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Fetch all users from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      security:
      - BearerAuth: []
      summary: Get Users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user in the database
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - BearerAuth: []
      summary: Create User
      tags:
      - Users
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: Enter "Bearer {token}" to authenticate
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
